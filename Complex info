#pragma once
//In C++, a constructor with only one required parameter is considered an implicit conversion function. It converts the parameter type to the class type. Whether this is a good thing or not depends on the semantics of the constructor.

//For example, if you have a string class with constructor String(const char* s), that's probably exactly what you want. You can pass a const char* to a function expecting a String, and the compiler will automatically construct a temporary String object for you.

//On the other hand, if you have a buffer class whose constructor Buffer(int size) takes the size of the buffer in bytes, you probably don't want the compiler to quietly turn ints into Buffers. To prevent that, you declare the constructor with the explicit keyword:

//class Buffer { explicit Buffer(int size); ... }
//That way,

//void useBuffer(Buffer& buf);
//useBuffer(4);
// a compile - time error.If you want to pass a temporary Buffer object, you have to do so explicitly :

//useBuffer(Buffer(4));
//In summary, if your single - parameter constructor converts the parameter into an object of your class, you probably don't want to use the explicit keyword. But if you have a constructor that simply happens to take a single parameter, you should declare it as explicit to prevent the compiler from surprising you with unexpected conversions.

//void operator+(const fraction &a, const fraction &b); to show c=a+b; a plus b. the letter a takes the operator+ to do plus b.

// //fraction operator+(const fraction &a){ what are we trying to get we are trying to get a fraction that's why we change void to fraction.
//fraction c;
//c.x = this->x;
//c.y=this->y;
//c+=a;
//return c;
//}

